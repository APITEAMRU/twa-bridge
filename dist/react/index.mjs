import{EventThemeChanged as e}from"solid";import{getThemeParams as t}from"utils";const s="web",a="phone",o="desktop",n="not_supported",r=(e,t)=>{const n=new URLSearchParams(window.location.hash.slice(1)).get("tgWebAppVersion");return Number(n)>=e&&-1!==t.indexOf((()=>{const e=window.location.hash.slice(1),t=new URLSearchParams(e).get("tgWebAppPlatform")??"ios";return["android","ios"].includes(t)?a:["tdesktop","macos"].includes(t)?o:s})())},i=()=>Math.random().toString(36).substring(3,9),_=()=>p()?(pe(fe),{status:!0}):(ie(fe,1),{status:n}),p=()=>r(0,[s,o,a]),u=()=>d()?(pe(ve),{status:!0}):(ie(ve,1),{status:n}),d=()=>r(6.4,[a]),c=e=>b()?(pe(qe,e),{status:!0}):(ie(qe,1),{status:n}),b=()=>r(0,[s,o,a]),g=()=>l()?(pe(ye),{status:!0}):(ie(ye,1),{status:n}),l=()=>r(0,[a]),w=e=>m()?(pe(Pe,e),{status:!0}):(ie(Pe,1),{status:n}),m=()=>r(0,[s]),h=()=>f()?(pe(Pe),{status:!0}):(ie(Pe,1),{status:n}),f=()=>r(0,[s]),v="web_app_invoke_custom_method",q=async e=>y()?(void 0===e.req_id&&(e.req_id=i()),pe(v,e),new Promise(((t,s)=>{const a=s=>{s.req_id===e.req_id&&(t({status:!0,data:s}),ce(Ge,a))};de(Ge,a)}))):(ie(v,1),{status:n}),y=()=>r(6.9,[s,o,a]),P=e=>S()?(pe(ke,e),{status:!0}):(ie(ke,1),{status:n}),S=()=>r(6.1,[s,o,a]),k=e=>x()?(pe(xe,e),{status:!0}):(ie(xe,1),{status:n}),x=()=>r(6.4,[s,o,a]),O=async e=>R()?(e.title.length>64&&ie(Oe,3),e.message.length<1&&ie(Oe,4),e.message.length>256&&ie(Oe,5),e.buttons.length<1&&ie(Oe,6),e.buttons.length>3&&ie(Oe,7),void 0!==e.buttons.find((e=>e.text?.match(/^(ok|close|cancel)$/g)))&&ie(Oe,8),pe(Oe,e),new Promise(((t,s)=>{const a=s=>{t({status:!!e.buttons.find((e=>e.id===s?.button_id)),data:s}),ce(He,a)};de(He,a)}))):(ie(Oe,1),{status:n}),R=()=>r(6.2,[s,o,a]),T=async e=>E()?(pe(we,e),new Promise(((t,s)=>{be(ze,(s=>{e.is_close&&u(),t({status:!0,data:s})})),be(Ke,(()=>{t({status:"closed"})}))}))):(ie(we,1),{status:n}),E=()=>r(6.4,[a]),C=e=>("/"!==e.path_full[0]&&(e.path_full="/"+e.path_full),W()?(pe(Re,e),{status:!0}):(ie(Re,1),{status:n})),W=()=>r(7,[s,o,a]),I=async e=>B()?(void 0===e.req_id&&(e.req_id=i()),pe(me,e),new Promise(((t,s)=>{const a=s=>{s.req_id===e.req_id&&(t({status:!0,data:s}),ce($e,a))};de($e,a)}))):(ie(me,1),{status:n}),B=()=>r(6.4,[s,o,a]),D=()=>L()?(pe(Te),{status:!0}):(ie(Te,1),{status:n}),L=()=>r(6.9,[s,o,a]),N=async()=>A()?(pe(he),new Promise(((e,t)=>{be(Fe,(t=>{"sent"===t.status&&e({status:!0}),e({status:!1})}))}))):(ie(he,1),{status:n}),A=()=>r(6.9,[s,o,a]),M=()=>U()?(pe(Ee),{status:!0}):(ie(Ee,1),{status:n}),U=()=>r(0,[s,o,a]),V=()=>$()?(pe(Ce),{status:!0}):(ie(Ce,1),{status:n}),$=()=>r(0,[s,o,a]),G=()=>J()?(pe(We),{status:!0}):(ie(We,1),{status:n}),J=()=>r(6.9,[s,o,a]),Q=e=>F()?(pe(Ie,e),{status:!0}):(ie(Ie,1),{status:n}),F=()=>r(6.1,[s,o,a]),H=e=>j()?(pe(Be,e),{status:!0}):(ie(Be,1),{status:n}),j=()=>r(6.1,[s,o,a]),z=e=>K()?(pe(De,e),{status:!0}):(ie(De,1),{status:n}),K=()=>r(6.1,[s,o,a]),X=e=>Y()?(pe(Le,e),{status:!0}):(ie(Le,1),{status:n}),Y=()=>r(0,[s,o,a]),Z=e=>ee()?(pe(Ne,e),{status:!0}):(ie(Ne,1),{status:n}),ee=()=>r(0,[s,o,a]),te=e=>se()?(pe(Ae,e),{status:!0}):(ie(Ae,1),{status:n}),se=()=>r(6.1,[s,o,a]),ae=e=>oe()?(e.query.length>256&&ie(Me,9),pe(Me,e),{status:!0}):(ie(Me,1),{status:n}),oe=()=>r(6.7,[s,o,a]),ne=e=>re()?(pe(Ue,e),{status:!0}):(ie(Ue,1),{status:n}),re=()=>r(6.1,[a]);var ie=(e,t)=>{"development"===process.env.NODE_ENV&&console.error(`[@apiteam/twa-bridge](${e}) = ${t}`)};const _e=()=>{const e=new URLSearchParams(window.location.hash.slice(1)).get("tgWebAppData");if(null===e)return ie("getInitData",2),null;const t=new URLSearchParams(e);let s={};return t.forEach(((e,t)=>{if(s[t]=e,void 0!==t.match(/^(chat|receiver|user)$/g))try{s[t]=JSON.parse(e)}catch{}})),s};var pe=(e,t)=>{window.TelegramWebviewProxy?window.TelegramWebviewProxy.postEvent(e,JSON.stringify(t)):window.external&&"notify"in window.external&&window.external.notify(JSON.stringify({eventType:e,eventData:t}))};const ue=((e=new Map)=>({once:(t,s,a=e.get(t),o=(e=>{s(e),a&&a.splice(a.indexOf(s)>>>0,1)}))=>a?a.push(o):e.set(t,[o]),on:(t,s,a=e.get(t))=>a?a.push(s):e.set(t,[s]),off:(t,s,a=e.get(t))=>a&&s?a.splice(a.indexOf(s)>>>0,1):e.set(t,[]),emit:(t,s,a=e.get(t)||[])=>{for(const e of a)e(s)}}))();(()=>{function s(s,a){s===e&&(a.theme_params=t(a.theme_params)),ue.emit(s,a),ue.emit("*",{name:s,data:a})}window.TelegramGameProxy_receiveEvent=s,window.Telegram={WebView:{receiveEvent:s}},window.TelegramGameProxy={receiveEvent:s}})();const de=(e,t)=>{ue.on(e,t)},ce=(e,t)=>{ue.off(e,t)},be=(e,t)=>{ue.once(e,t)};var ge=Object.freeze({__proto__:null,off:ce,on:de,once:be});const le="web_app_invoke_custom_method",we="web_app_open_scan_qr_popup",me="web_app_read_text_from_clipboard",he="web_app_request_phone",fe="web_app_close",ve="web_app_close_scan_qr_popup",qe="web_app_data_send",ye="web_app_expand",Pe="iframe_ready",Se="iframe_will_reload",ke="web_app_open_invoice",xe="web_app_open_link",Oe="web_app_open_popup",Re="web_app_open_tg_link",Te="web_app_ready",Ee="web_app_request_theme",Ce="web_app_request_viewport",We="web_app_request_write_access",Ie="web_app_set_background_color",Be="web_app_set_header_color",De="web_app_setup_back_button",Le="web_app_setup_closing_behavior",Ne="web_app_setup_main_button",Ae="web_app_setup_settings_button",Me="web_app_switch_inline_query",Ue="web_app_trigger_haptic_feedback",Ve="back_button_pressed",$e="clipboard_text_received",Ge="custom_method_invoked",Je="invoice_closed",Qe="main_button_pressed",Fe="phone_requested",He="popup_closed",je="reload_iframe",ze="qr_text_received",Ke="scan_qr_popup_closed",Xe="set_custom_style",Ye="settings_button_pressed",Ze="theme_changed",et="viewport_changed",tt="write_access_requested";export{Ve as EventBackButtonPressed,$e as EventClipboardTextReceived,Ge as EventCustomMethodInvoked,Je as EventInvoiceClosed,Qe as EventMainButtonPressed,Fe as EventPhoneRequested,He as EventPopupClosed,ze as EventQrTextReceived,je as EventReloadIframe,Ke as EventScanQrPopupClosed,Xe as EventSetCustomStyle,Ye as EventSettingsButtonPressed,Ze as EventThemeChanged,et as EventViewportChanged,tt as EventWriteAccessRequested,fe as MethodClose,ve as MethodCloseScanQrPopup,qe as MethodDataSend,ye as MethodExpand,Pe as MethodIframeReady,Se as MethodIframeWillReload,le as MethodInvokeCustomMethod,ke as MethodOpenInvoice,xe as MethodOpenLink,Oe as MethodOpenPopup,we as MethodOpenScanQrPopup,Re as MethodOpenTgLink,me as MethodReadTextFromClipboard,Te as MethodReady,he as MethodRequestPhone,Ee as MethodRequestTheme,Ce as MethodRequestViewport,We as MethodRequestWriteAccess,Ie as MethodSetBackgroundColor,Be as MethodSetHeaderColor,De as MethodSetupBackButton,Le as MethodSetupClosingBehavior,Ne as MethodSetupMainButton,Ae as MethodSetupSettingsButton,Me as MethodSwitchInlineQuery,Ue as MethodTriggerHapticFeedback,n as NOT_SUPPORTED,o as TG_DESKTOP,a as TG_PHONE,s as TG_WEB,_ as bridgeClose,u as bridgeCloseScanQrPopup,c as bridgeDataSend,g as bridgeExpand,_e as bridgeGetInitData,w as bridgeIframeReady,h as bridgeIframeWillReload,q as bridgeInvokeCustomMethod,P as bridgeOpenInvoice,k as bridgeOpenLink,O as bridgeOpenPopup,T as bridgeOpenScanQrPopup,C as bridgeOpenTgLink,I as bridgeReadTextFromClipboard,D as bridgeReady,N as bridgeRequestPhone,M as bridgeRequestTheme,V as bridgeRequestViewport,G as bridgeRequestWriteAccess,Q as bridgeSetBackgroundColor,H as bridgeSetHeaderColor,z as bridgeSetupBackButton,X as bridgeSetupClosingBehavior,Z as bridgeSetupMainButton,te as bridgeSetupSettingsButton,ae as bridgeSwitchInlineQuery,ne as bridgeTriggerHapticFeedback,ie as debug,ge as listener,pe as sender,p as supportClose,d as supportCloseScanQrPopup,b as supportDataSend,l as supportExpand,m as supportIframeReady,f as supportIframeWillReload,y as supportInvokeCustomMethod,S as supportOpenInvoice,x as supportOpenLink,R as supportOpenPopup,E as supportOpenScanQrPopup,W as supportOpenTgLink,B as supportReadTextFromClipboard,L as supportReady,A as supportRequestPhone,U as supportRequestTheme,$ as supportRequestViewport,J as supportRequestWriteAccess,F as supportSetBackgroundColor,j as supportSetHeaderColor,K as supportSetupBackButton,Y as supportSetupClosingBehavior,ee as supportSetupMainButton,se as supportSetupSettingsButton,oe as supportSwitchInlineQuery,re as supportTriggerHapticFeedback};
